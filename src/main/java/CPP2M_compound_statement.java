import java.util.Enumeration;

/* Generated By:JJTree: Do not edit this line. CPP2M_compound_statement.java */

public class CPP2M_compound_statement extends SimpleNode {
  public CPP2M_compound_statement(int id) {
    super(id);
  }

  public CPP2M_compound_statement(CPPParser p, int id) {
    super(p, id);
  }

  public String process(String prefix) throws Exception {
  	int n = this.jjtGetNumChildren();
  	if (scope.scopeName == null || scope.scopeName == "")
  		scope.scopeName += "Subsystem " + (++scope.parent.blockProperties.count);
  	prefix = scope.toString();
  	
  	println("\n% function: " + scope.scopeName + " [begin]");
  	println("s = add_block('built-in/Subsystem', '" + prefix + "');"); 
	
  	/**
  	 * adding InPorts
  	 */
  	for(Enumeration e = scope.portTable.keys(); e.hasMoreElements(); ) {
  	  	Variable v = (Variable)e.nextElement();
    	Integer temp = (Integer)scope.portTable.get(v); 
    	if(temp.equals(Scope.IN) || temp.equals(Scope.OUT) || temp.equals(Scope.IN_OUT))
   			if(scope.type == Scope.FUNC) {
   				v.dumpAsInput(scope);
   				/*
   				//System.out.println(scope);
   				int startY = scope.blockProperties.expY;
   				String busSelector = v.getBusSelector(scope, "");   				
   				int endY = scope.blockProperties.expY;
   				double location = Math.floor((startY + endY)/2);
   	    		String inPort = add_block(prefix, "'built-in/InPort'", v.getName(),  
   	    		        "'Position', [" + scope.blockProperties.inX + " " 
   	    			                    + (location-7) + " " 
   	    							    + (scope.blockProperties.inX+30) + " " 
   										+ (location+8) 
   										+ "]", false); 
   	   			//scope.blockProperties.inY += 50;
   	    		scope.blockProperties.resetPositions(false);
   	    		add_line(scope.toString(), inPort + "/1", "i_" + busSelector + "/1", inPort);
   	    		*/
   			}
  	}

  	/**
  	 * processing statement list
  	 */
  	for(int i=0; i<n; i++)
		((SimpleNode)this.jjtGetChild(i)).process(prefix);

	/**
  	 * adding OutPorts
  	 */
	scope.blockProperties.resetPositions(false);
  	for(Enumeration e = scope.portTable.keys(); e.hasMoreElements(); ) {
  	  	Variable v = (Variable)e.nextElement();
    	Integer temp = (Integer)scope.portTable.get(v); 
    	if(temp.equals(Scope.OUT) || temp.equals(Scope.IN_OUT))
   			if(scope.type == Scope.FUNC) {
   				v.dumpAsOutput(scope);
   				/*
   				int startY = scope.blockProperties.expY;
   				String busCreator = v.getBusCreator(scope, "");   				
   				int endY = scope.blockProperties.expY;
   				double location = Math.floor((startY + endY)/2);
	    		String outPort = add_block(prefix, "'built-in/OutPort'", v.getName(),  
	    		        "'Position', [" + scope.blockProperties.outX + " " 
	    			                    + (location-7) + " " 
	    							    + (scope.blockProperties.outX+30) + " " 
										+ (location+8) 
										+ "]", false); 
	   			//scope.blockProperties.outY += 50;
   	    		scope.blockProperties.resetPositions(false);
   	    		add_line(scope.toString(), busCreator + "/1", outPort + "/1",  busCreator);
   	    		*/
   			}
  	}

  	/**
  	 * adjusting the size
  	 */
  	int size = Math.max(scope.portTable.size() * 50 + 50, 100);
	println("set_param('" + prefix+ "', 'Position', [" + scope.parent.blockProperties.stX + " " 
			                             + scope.parent.blockProperties.stY + " " 
										 + (scope.parent.blockProperties.stX+250) 
										 + " " + (scope.parent.blockProperties.stY+size) 
										 + "]);");
	scope.parent.blockProperties.stY += size + 100;
	println("% function: " + scope.scopeName + " [end]\n");
  	
	//return "Subsystem " + scope.parent.blockProperties.count;
  	return scope.scopeName;
  }
}
