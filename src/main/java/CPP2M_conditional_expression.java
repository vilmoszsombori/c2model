/* Generated By:JJTree: Do not edit this line. CPP2M_conditional_expression.java */

public class CPP2M_conditional_expression extends SimpleNode {
  public CPP2M_conditional_expression(int id) {
    super(id);
  }

  public CPP2M_conditional_expression(CPPParser p, int id) {
    super(p, id);
  }

  public static final int HEIGHT = 20, WIDTH = 20, DEPLX = 50, DEPLY = 50, BASE = 5;

  public String process(String prefix) throws Exception {
  	int n = this.jjtGetNumChildren();
  	prefix = scope.toString();
  	if (n == 1)
  		return ((SimpleNode) this.jjtGetChild(0)).process(prefix);
  	else if (n == 3) {
 		String gate = add_block(prefix, "'built-in/Switch'", "Switch ", 
				  "'Position', [" + scope.blockProperties.expX + " "
				  + (scope.blockProperties.expY+BASE) + " "
				  + (scope.blockProperties.expX+WIDTH) + " "
				  + (scope.blockProperties.expY+BASE+2*HEIGHT) + "]", 
				  false);
		scope.blockProperties.expX -= DEPLX;
  		scope.blockProperties.expY += DEPLY; 		
  		String expr0 = ((SimpleNode) this.jjtGetChild(1)).process(prefix);
		String expr1 = ((SimpleNode) this.jjtGetChild(0)).process(prefix);
		String expr2 = ((SimpleNode) this.jjtGetChild(2)).process(prefix);
  		if (expr0 != "")
  			add_line(prefix, expr0 + "/1", gate + "/1", null);
  		if (expr1 != "")
  			add_line(prefix, expr1 + "/1", gate + "/2", null);
  		if (expr2 != "")
  			add_line(prefix, expr2 + "/1", gate + "/3", null);
		scope.blockProperties.expX += DEPLX;
  		return gate;  		
  	}
  	else  			
  		throw new Exception("Unexpected number of child nodes!");
  }

}
