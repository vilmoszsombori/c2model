/* Generated By:JJTree: Do not edit this line. CPP2M_postfix_expression.java */
public class CPP2M_postfix_expression extends SimpleNode {
  public CPP2M_postfix_expression(int id) {
    super(id);
  }

  public CPP2M_postfix_expression(CPPParser p, int id) {
    super(p, id);
  }
  
  protected static final int IN_PORT = 5,
  							OUT_PORT = 6,
						 IN_OUT_PORT = 4,
  							FCN_CALL = 7, 
							   CONST = 9, 
							   OTHER = 3;  
  int _type = OTHER;

  protected Vector _token = new Vector();
  
  public String process(String prefix) throws Exception {
  	int n = this.jjtGetNumChildren();
  	prefix = scope.toString();
	String out = "", id = "";	
	for(int i=0; i<_token.size(); i++)
		id += "_" + _token.get(i);
	if( _type == IN_PORT ) {
		id = "i" + id;
		//correct it in the near future
		id = id.substring(0, Math.min(31, id.length()));
		out = add_block(prefix, "'built-in/From'", (String)_token.get(0), 
				        "'Position', [" + scope.blockProperties.inX + " " 
					                + scope.blockProperties.inY + " " 
									+ (scope.blockProperties.inX+15+(id.length()*7)) + " " 
									+ (scope.blockProperties.inY+20) + "]"
						+ ", 'GotoTag', '" + id + "'", 
					false);
		scope.blockProperties.inY += 50;		
	}
	else if( _type == OUT_PORT ) {
		id = "o" + id;
		//correct it in the near future
		id = id.substring(0, Math.min(31, id.length()));
		out = add_block(prefix, "'built-in/Goto'", (String)_token.get(0), 
		        		"'Position', [" + scope.blockProperties.outX + " " 
									+ scope.blockProperties.outY + " " 
									+ (scope.blockProperties.outX+15+(id.length()*7)) + " " 
									+ (scope.blockProperties.outY+20) + "]" 
				        + ", 'GotoTag', '" + id + "'", 
			false);
		scope.blockProperties.outY += 50;
	}
	else if( _type == CONST ) {
		out = ((SimpleNode)jjtGetChild(0)).process(prefix);
	}
	else if( _type == FCN_CALL && scope.GetFunction(id) != null ) {
		id = (String)_token.get(0);
  		println("\n% function call: " + id + " [begin]\n");
  		int paramCount = scope.GetFunction(id).GetParameterCount();
  		out = add_block(prefix, "'built-in/Subsystem'", id, null, true);		  		
  		println("set_param('" + prefix + "/" + out + "', 'Position', [" + scope.blockProperties.stX + " " 
  				+ scope.blockProperties.stY + " " 
				+ (scope.blockProperties.stX+250) 
				+ " " + (scope.blockProperties.stY+Math.max(1, paramCount)*50) 
				+ "]);");
  		scope.blockProperties.stY += Math.max(1, paramCount)*50 + 50;
  	  	for(int i=0; i<paramCount; i++) {
				add_block(prefix+"/"+out, "'built-in/InPort'", "", null, true);
  			String t = ((SimpleNode)this.jjtGetChild(i)).process(prefix);
  			if(t != "" && t != null)
  				add_line(prefix, t + "/1", out + "/" + (i+1), null);
  	  	}		  		
		add_block(prefix+"/"+out, "'built-in/OutPort'", "", null, true);
  		println("\n% function call: " + scope.scopeName + " [end]");		
	}
	else {
	  	if (n==1)
	  		return ((SimpleNode) this.jjtGetChild(0)).process(prefix);
	  	else {
	  		for (int i = 0; i < n; ++i) {
	  			SimpleNode c = (SimpleNode)children[i];
	  			if (c != null)
	  				c.process(prefix);
	  		}
	  	}		
	}
	return out;
	/*
	if (!identifier.isEmpty()) {
	  	if (functionCall) {
	  		Function func;
	  		
	  		if((func = scope.GetFunction((String)identifier.get(0)))==null) {
	  			System.out.println("Warning: function " + func + " is not declared (scope: " + scope + ")");  			
	  		} 
	  		else {
		  	  	prefix = scope.toString();
		  		println("\n% function call: " + func + " [begin]\n");
		  		paramCount = Math.min(paramCount, func.getInputs());
		  		out = add_block(prefix, "'built-in/Subsystem'", func.getName(), null, true);		  		
		  		println("set_param('" + prefix + "/" + out + "', 'Position', [" + scope.blockProperties.stX + " " 
		  				+ scope.blockProperties.stY + " " 
						+ (scope.blockProperties.stX+250) 
						+ " " + (scope.blockProperties.stY+Math.max(1, paramCount)*50) 
						+ "])");
		  		scope.blockProperties.stY += Math.max(1, paramCount)*50 + 50;
		  	  	for(int i=0; i<paramCount; i++) {
  					add_block(prefix+"/"+out, "'built-in/InPort'", "", null, true);
		  			String t = ((SimpleNode)this.jjtGetChild(i)).process(prefix);
		  			if(t != "" && t != null)
		  				add_line(prefix, t + "/1", out + "/" + (i+1), null);
		  	  	}		  		
				add_block(prefix+"/"+out, "'built-in/OutPort'", "", null, true);
		  		println("\n% function call: " + scope.scopeName + " [end]");
	  		}
	  	}
	  	else {
  			String port = (String)identifier.get(0);
  			Variable v;
  			if((v=scope.GetVariable(port))==null)
  				System.out.println("Warning: variable " + port + " is not declared (scope: " + scope + ")");
  			
  			if(scope.isLocalVariable(v))
  				System.out.println("Local variable referenced: "+v);
  			else
  				System.out.println("Global variable referenced: "+v);

  			if(IN && !OUT)
  				if (this.scope.inPorts.containsKey(identifier)) {
  					System.out.println("yeeeee: " + this.scope.inPorts.get(identifier));
  					return (String)this.scope.inPorts.get(identifier);  					
  				}
  				else {
  		  			Scope type;
  					if((type=scope.GetType(v.getType()))!=null) {
  						System.out.println("Postfix :: Yes: " + type);
  					}
  					else {
  						System.out.println("Postfix :: No: " + identifier);
	  					out = add_block(prefix, "'built-in/InPort'", port, 
	  							        "'Position', [" + scope.inX + " " 
										                + scope.inY + " " 
														+ (scope.inX+30) + " " 
														+ (scope.inY+15) 
													    + "]", 
										true);
	  					scope.inY += 50;
  					}
  					this.scope.inPorts.put(identifier, out);
  				}
  			if(OUT && !IN)
  				if (this.scope.outPorts.containsKey(identifier)) {
  					System.out.println("yeeeee: " + this.scope.inPorts.get(identifier));
  					return (String)this.scope.outPorts.get(identifier);
  				}
  				else {
					out = add_block(prefix, "'built-in/OutPort'", port, 
						        "'Position', [" + scope.outX + " " 
							                + scope.outY + " " 
											+ (scope.outX+30) + " " 
											+ (scope.outY+15) 
										    + "]", 
							true);
					scope.outY += 50;
					//this.scope.outPorts.put(identifier.toString(), out);
  				}
  			if(out=="") System.out.println("Warning: out == null in "+identifier+"; out = "+OUT+" in = "+IN);
  		}
		return out;
  	}
  	else if (n==1) {
  		return ((SimpleNode)this.jjtGetChild(0)).process(prefix);
  	}
  	else 
  		throw new Exception("Unexpected number of child nodes");
  	*/ 
  }
  
  public String toString() { 
  	return CPPParserTreeConstants.jjtNodeName[id] + 
  		   ((this.jjtGetNumChildren() != 0) ? " [" + this.jjtGetNumChildren() + "]" : "") +
		   ((!_token.isEmpty()) ? " == " + _token + " (type=" + _type + ")" : ""); 
  }  
    
}
