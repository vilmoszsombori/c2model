/* Generated By:JJTree: Do not edit this line. CPP2M_selection_statement.java */

public class CPP2M_selection_statement extends SimpleNode {
  public CPP2M_selection_statement(int id) {
    super(id);
  }

  public CPP2M_selection_statement(CPPParser p, int id) {
    super(p, id);
  }

  public String process(String prefix) throws Exception {
  	int n = this.jjtGetNumChildren();
  	prefix = scope.toString();
  	if (n != 2 && n != 3)
  		throw new Exception("Unexpected number of child nodes!");
	if (_token == "if") {
		String expr = ((SimpleNode) this.jjtGetChild(0)).process(prefix);
		String stmt = ((SimpleNode) this.jjtGetChild(1)).process(prefix);
		add_block(prefix + "/" + stmt, "'built-in/EnablePort'", "Enable ", null, false);
		add_line(prefix, expr + "/1", stmt + "/Enable", null);
		if (n == 3) {
			String not = add_block(prefix, "'built-in/Logical Operator'", "Logical Operator ", "'Operator', 'NOT'", false);
			println("set_param('" + prefix + "/" + not + "', 'Position', [" + (scope.blockProperties.stX) + " " 
                    + scope.blockProperties.stY + " " 
					 + (scope.blockProperties.stX+30) 
					 + " " + (scope.blockProperties.stY+20) 
					 + "])");
			scope.blockProperties.stY += 50;
			stmt = ((SimpleNode) this.jjtGetChild(2)).process(prefix);
			add_block(prefix + "/" + stmt, "'built-in/EnablePort'", "Enable ", null, false);
			add_line(prefix, expr + "/1", not + "/1", null);
			add_line(prefix, not  + "/1", stmt + "/Enable", null);			
		}					
	}
  	return "";
  }
}
