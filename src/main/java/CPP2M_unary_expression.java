/* Generated By:JJTree: Do not edit this line. CPP2M_unary_expression.java */

public class CPP2M_unary_expression extends SimpleNode {
  public CPP2M_unary_expression(int id) {
    super(id);
  }

  public CPP2M_unary_expression(CPPParser p, int id) {
    super(p, id);
  }

  public static final int HEIGHT = 20, WIDTH = 30, DEPLX = 50, DEPLY = 50, BASE = 5;
 
  public String process(String prefix) throws Exception {
  	//int n = this.jjtGetNumChildren();
  	prefix = scope.toString();  	
  	if ( _token == "postfix" )
  		return ((SimpleNode) this.jjtGetChild(0)).process(prefix);
  	else if ( _token == "sizeof" )
  		return "";
  	else if ( _token == "operator")
  		return ((SimpleNode) this.jjtGetChild(1)).process(prefix);
  	else if ( _token == "!") {
  		String op = add_block(prefix, "'built-in/Logical Operator'", "Logical Operator ", "'Operator', 'NOT', " 
				  + "'Position', [" + scope.blockProperties.expX + " "
				  + (scope.blockProperties.expY) + " "
				  + (scope.blockProperties.expX+WIDTH) + " "
				  + (scope.blockProperties.expY+HEIGHT) + "]", 
				  false);  		 
		scope.blockProperties.expX -= DEPLX;
		String out = ((SimpleNode)this.jjtGetChild(0)).process(prefix);
  		scope.blockProperties.expY += DEPLY;
  		if (out!="")
  			add_line(prefix, out + "/1", op + "/1", null);
  		else 
  			System.out.println("error in unary");
  		return op;
  	}
  	else if ( _token == "++" )
  		return ((SimpleNode) this.jjtGetChild(1)).process(prefix);
  	else if ( _token == "--" )
  		return ((SimpleNode) this.jjtGetChild(1)).process(prefix);  		
  	else
  		throw new Exception("Unexpected number of child nodes.");
  }
}
