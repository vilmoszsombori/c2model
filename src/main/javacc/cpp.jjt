/*

  C grammar defintion for use with JavaCC
  Modified by Vilmos Zsombori (vilmos.zsombori@gmail.com) 20/10/2004

 */

options {
	MULTI=true;
	NODE_DEFAULT_VOID=false;
	NODE_PREFIX="CPP2M_";
	NODE_USES_PARSER=true;
}

PARSER_BEGIN(CPPParser)

public final class CPPParser {

  /**
   * A symbol table manager object. Currently only types are recorded for
   * doing semantic predicates for parsing.
   */
  static SymtabManager sym;

  /*
   * Methods used in semantics predicates.
   */

  /**
   * Reads a fully qualified name (since it is used during lookahead, we 
   * cannot use token. We have to explicitly use getToken).
   */
  static String GetFullyScopedName() // throws ParseError
  {
     Token t = getToken(1);

     if (t.kind != ID && t.kind != SCOPE)
        return null;

     StringBuffer s = new StringBuffer();

     int i;
     if (t.kind != SCOPE)
     {
        s.append(t.image);
        t = getToken(2);
        i = 3;
     }
     else 
        i = 2;

     while (t.kind == SCOPE)
     {
        s.append(t.image);
        s.append((t = getToken(i++)).image);
        t = getToken(i++);
     }

     return s.toString();
  }

  /**
   * This method first tries to read a sequence of tokens of the form 
   *             ("::")? <ID> ("::" <ID>)* 
   * and if it succeeds then asks the symbol table manager  if this is
   * the name of a constructor.
   */
  static boolean IsCtor() // throws ParseError
  {
      return sym.IsCtor(GetFullyScopedName());
  }
  
  /**
   * Helpers
   */
  static boolean _arity_req		= false;
  static boolean _typedef		= false;
  static boolean _input_port	= false;
  static boolean _output_port	= false;
  static boolean _parameter		= false;

  static Variable _variable = null;
  static String	  _type		= null;
  static Function _function = null;
}

PARSER_END(CPPParser)

SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
|  "#" : PREPROCESSOR_OUTPUT
}

<PREPROCESSOR_OUTPUT> SKIP: { "\n" : DEFAULT }
<PREPROCESSOR_OUTPUT> MORE: { < ~[] > }

TOKEN :
{
  < LCURLYBRACE: "{" >
| < RCURLYBRACE: "}" >
| < LSQUAREBRACKET: "[" >
| < RSQUAREBRACKET: "]" >
| < LPARENTHESIS: "(" >
| < RPARENTHESIS: ")" >
| < SCOPE: "::" >
| < COLON: ":" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < QUESTIONMARK: "?" >
| < ELLIPSIS: "..." >
| < ASSIGNEQUAL: "=" >
| < TIMESEQUAL: "*=" >
| < DIVIDEEQUAL: "/=" >
| < MODEQUAL: "%=" >
| < PLUSEQUAL: "+=" >
| < MINUSEQUAL: "-=" >
| < SHIFTLEFTEQUAL: "<<=" >
| < SHIFTRIGHTEQUAL: ">>=" >
| < BITWISEANDEQUAL: "&=" >
| < BITWISEXOREQUAL: "^=" >
| < BITWISEOREQUAL: "|=" >
| < OR: "||" >
| < AND: "&&" >
| < BITWISEOR: "|" >
| < BITWISEXOR: "^" >
| < AMPERSAND: "&" >
| < EQUAL: "==" >
| < NOTEQUAL: "!=" >
| < LESSTHAN: "<" >
| < GREATERTHAN: ">" >
| < LESSTHANOREQUALTO: "<=" >
| < GREATERTHANOREQUALTO: ">=" >
| < SHIFTLEFT: "<<" >
| < SHIFTRIGHT: ">>" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < DIVIDE: "/" >
| < MOD: "%" >
| < PLUSPLUS: "++" >
| < MINUSMINUS: "--" >
| < TILDE: "~" >
| < NOT: "!" >
| < DOT: "." >
| < POINTERTO: "->" >
| < DOTSTAR: ".*" >
| < ARROWSTAR: "->*" >
| < AUTO: "auto" >
| < BREAK: "break" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DELETE: "delete" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTERN: "extern" >
| < FLOAT: "float" >
| < FOR: "for" >
| < FRIEND: "friend" >
| < GOTO: "goto" >
| < IF: "if" >
| < INLINE: "inline" >
| < INT: "int" >
| < LONG: "long" >
| < NEW: "new" >
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < REDECLARED: "redeclared" >
| < REGISTER: "register" >
| < RETURN: "return" >
| < SHORT: "short" >
| < SIGNED: "signed" >
| < SIZEOF: "sizeof" >
| < STATIC: "static" >
| < STRUCT: "struct" >
| < CLASS : "class" >
| < SWITCH: "switch" >
| < TEMPLATE: "template" >
| < THIS: "this" >
| < TRY: "try" >
| < TYPEDEF: "typedef" >
| < UNION: "union" >
| < UNSIGNED: "unsigned" >
| < VIRTUAL: "virtual" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
| < OPERATOR: "operator" >
| < TRUETOK: "true" >
| < FALSETOK: "false" >
| < THROW: "throw" >
}

TOKEN [IGNORE_CASE] :
{
  <  OCTALINT : "0" (["0"-"7"])* >
| <  OCTALLONG : <OCTALINT> "l" >
| <  UNSIGNED_OCTALINT : <OCTALINT> "u" >
| <  UNSIGNED_OCTALLONG : <OCTALINT> ("ul" | "lu") >

| <  DECIMALINT : ["1"-"9"] (["0"-"9"])* >
| <  DECIMALLONG : <DECIMALINT> ["u","l"] >
| <  UNSIGNED_DECIMALINT : <DECIMALINT> "u" >
| <  UNSIGNED_DECIMALLONG : <DECIMALINT> ("ul" | "lu") >


| <  HEXADECIMALINT : "0x" (["0"-"9","a"-"f"])+ >
| <  HEXADECIMALLONG : <HEXADECIMALINT> (["u","l"])? >
| <  UNSIGNED_HEXADECIMALINT : <HEXADECIMALINT> "u" >
| <  UNSIGNED_HEXADECIMALLONG : <HEXADECIMALINT> ("ul" | "lu") >


| <  FLOATONE : ((["0"-"9"])+ "." (["0"-"9"])* | (["0"-"9"])* "." (["0"-"9"])+)
              ("e" (["-","+"])? (["0"-"9"])+)? (["f","l"])? >

| <  FLOATTWO : (["0"-"9"])+ "e" (["-","+"])?  (["0"-"9"])+ (["f","l"])? >
}

TOKEN :
{

  <  CHARACTER : ("L")? "'"
   (   (~["'","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )
   "'" >

| <  STRING : ("L")? "\""
   ( ( ~["\"","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )*
   "\"" >
}

SimpleNode translation_unit(String prefix) : {}
{
   { sym.OpenScope(prefix, Scope.GLOBAL); }
   ( LOOKAHEAD(2) external_declaration() )* <EOF>
   { sym.CloseScope(); }
   { return jjtThis; }
}

void external_declaration()  :
{ boolean isTypedef = false; }
{
     LOOKAHEAD(("typedef" | template_head())? class_head()  "{")
       ( template_head() )? declaration()

   | LOOKAHEAD("enum" (<ID>)? "{")
       enum_specifier() (init_declarator_list(false))?  ";"

   | LOOKAHEAD( (template_head())? 
    			 dtor_ctor_decl_spec()
                 dtor_declarator() "{"
              )
       dtor_definition()

   | LOOKAHEAD(dtor_ctor_decl_spec() ctor_declarator_lookahead())
       ctor_definition()

   | LOOKAHEAD((declaration_specifiers())?  function_declarator_lookahead())
       function_definition()

   | LOOKAHEAD((scope_override())? "operator")
         conversion_function_decl_or_def()

   | template_head()
      (
        LOOKAHEAD(dtor_ctor_decl_spec() ctor_declarator_lookahead())
           ctor_definition()

      | LOOKAHEAD((declaration_specifiers())?  function_declarator_lookahead())
           function_definition()

      | isTypedef = declaration_specifiers()
               (init_declarator_list(isTypedef))?  ";"
      )

   | declaration()

   | ";"
} 

void function_definition()  :
{
   Scope sc = null;
   boolean isTypedef;
   _function = new Function();
}
{
   ( LOOKAHEAD(3) isTypedef = declaration_specifiers()
        sc = function_declarator(isTypedef) func_decl_def(sc)

   | sc = function_declarator(false) func_decl_def(sc)
   )
    
   { if (sc == sym.GetCurScope()) sym.CloseScope(); _function = null; }
}
 

void func_decl_def(Scope sc)  :
{ boolean closeReqd = false; }
{
  { if (closeReqd = (sc != null && sc != sym.GetCurScope())) sym.OpenScope(sc); }

  ( ";" | compound_statement(sc) )

  { if (closeReqd) sym.CloseScope(); }
} 

void linkage_specification() : {}
{
   "extern" <STRING>
   (
    "{" ( external_declaration() )* "}" 
      ( LOOKAHEAD(";") ";")?
   |
    declaration()
   )
}

void declaration() :
{ boolean isTypedef = false; }
{
   { _typedef = false; }
   
   ( LOOKAHEAD(2)
      isTypedef = declaration_specifiers()
               (init_declarator_list(isTypedef))? ";"

   | linkage_specification() )   
   
   { _type = null; }    
}

/**
 * Very temporary. Just returns true if it sees a typedef. Finally, we will
 * need a structure that stores all the attributes.
 */
boolean type_modifiers()  :
{ boolean isTypedef = false; }
{
   ( isTypedef = storage_class_specifier() | type_qualifier() | "inline" | "virtual" | "friend" )
   { return isTypedef; }
}

/**
 * Very temporary. Just returns true if it sees a typedef. Finally, we will
 * need a structure that stores all the attributes.
 */
boolean declaration_specifiers()  :
{
   Token t;
   boolean isTypedef = false, tmp;
}
{
 (
   ( LOOKAHEAD(type_modifiers()) tmp = type_modifiers() { isTypedef |= tmp; } )+

    [ LOOKAHEAD(2) (
     LOOKAHEAD(builtin_type_specifier()) builtin_type_specifier()
         (  LOOKAHEAD(2) (
            LOOKAHEAD(builtin_type_specifier()) builtin_type_specifier()
          |
            LOOKAHEAD(type_modifiers()) tmp = type_modifiers() )
                                        { isTypedef |= tmp; }
         )*
    | ( class_specifier() | enum_specifier() | qualified_type() )
      (LOOKAHEAD(2) tmp = type_modifiers() { isTypedef |= tmp;} )*

    ) ]

   | LOOKAHEAD(builtin_type_specifier()) builtin_type_specifier()
         ( 
           LOOKAHEAD(2) 
             (
                 LOOKAHEAD(builtin_type_specifier()) builtin_type_specifier()
               | tmp = type_modifiers() { isTypedef |= tmp; } 
             )
         )*

   | ( class_specifier() | enum_specifier() | qualified_type() )
     (LOOKAHEAD(2) tmp = type_modifiers() { isTypedef |= tmp; } )*
 )

 { return isTypedef; }
}

void simple_type_specifier() : {}
{
   ( builtin_type_specifier() | qualified_type() )
}

void scope_override_lookahead() : {}
{
    "::" | <ID> ("<" template_argument_list() ">")? "::"
}

String scope_override() :
{
   String name = "";
   Token t = null;
}
{
  (
    ("::")  { name += "::"; }
    (
      LOOKAHEAD(2) t = <ID> { jjtThis._token = t.image; }
      ("<" template_argument_list() ">")? "::" { name += t.image + "::"; }
    )*
   |
    (
      LOOKAHEAD(2) t = <ID> { jjtThis._token = t.image; }
      ("<" template_argument_list() ">")? "::" { name += t.image + "::"; }
    )+
  )  
  { return name; }
}


String qualified_id() :
{
   String name = "";
   Token t;
}
{
    [ LOOKAHEAD(scope_override_lookahead()) name = scope_override() ]
    (
      t = <ID> [ "<" template_argument_list()  ">" ]
      { jjtThis._token = t.image; }
      { return name + t.image; }
     |
      "operator" optor() { return "operator"; }
    )
}

void ptr_to_member() : {}
{
    scope_override()  "*"
}

void qualified_type() : {}
{
    LOOKAHEAD({ sym.IsFullyScopedTypeName(GetFullyScopedName()) })
        _type = qualified_id()
}

void type_qualifier() : {}
{
    "const" | "volatile"
}

/**
 * Very temporary. Just returns true if it sees a typedef. Finally, we will
 * need a structure that stores all the attributes.
 */
boolean storage_class_specifier() : {}
{
   ( "auto" | "register" | "static" | "extern" ) { return false; }
   | "typedef"  { _typedef = true; return true; }
}

void builtin_type_specifier() : {}
{
     "void"		{ _type = "void";	}
   | "char"		{ _type = "char";	} 
   | "short"	{ _type = "short";	} 
   | "int"		{ _type = "int";	}
   | "long"		{ _type = "long";	} 
   | "float"	{ _type = "float";	} 
   | "double"	{ _type = "double"; } 
   | "signed" 
   | "unsigned"
}

void init_declarator_list(boolean isTypedef) : {}
{
   init_declarator(isTypedef) ("," init_declarator(isTypedef))*
}

String init_declarator(boolean isTypedef) :
{ String name = null; }
{
   name = declarator()
   {
      if (isTypedef)
         sym.PutTypeName(name);
   }
   ( "=" initializer() | "(" expression_list()  ")" )?
   { return name; }
}

void class_head() :
{ Token t; }
{
   ("struct" | "union" | "class")
   (
     t = <ID> { jjtThis._token  = t.image; }
     (base_clause(null))?
   )?
}

Scope class_specifier() :
{
   ClassScope sc = null;
   Token t;
}
{
   ( "struct" | "union" | "class" )
   (
        "{" { sym.OpenScope(null, Scope.STRUCT); }
        (member_declaration())*
        "}" { sym.CloseScope(); }

     | LOOKAHEAD(2) t = <ID> 
          { sc = (ClassScope)sym.OpenScope(t.image, Scope.TYPE); }
          { jjtThis._token = t.image; }
          { _type = t.image; }
       (base_clause(sc))? 
       "{" (member_declaration())* "}"
          { sym.CloseScope();}

     | t = <ID>
       (LOOKAHEAD(2) "<" template_argument_list()  ">")?
          { sym.PutTypeName(t.image); }
          { jjtThis._token = t.image; }
          { _type = t.image; }
   )
   { return sc; }
}

void base_clause(ClassScope scope) :
{}
{
   ":" base_specifier(scope) ( "," base_specifier(scope) )*
}

void base_specifier(ClassScope scope) :
{ Token t; }
{
   ("virtual" (access_specifier())? | access_specifier() ("virtual")?)?
   (LOOKAHEAD(scope_override_lookahead()) scope_override())?
   t = <ID> ("<" template_argument_list()  ">")?
   { jjtThis._token = t.image; }
   { scope.AddSuper(sym.GetScope(t.image)); }
}

void access_specifier() : {}
{
   "public" | "protected" | "private"
}

void member_declaration() :
{ boolean isTypedef = false; Token t = null; }
{
     LOOKAHEAD(("typedef")? class_head() "{") declaration()

   | LOOKAHEAD("enum" (t = <ID>)? "{") { jjtThis._token = t.image; }
       enum_specifier()
       ( member_declarator_list(false) )?  ";"

   | LOOKAHEAD( "operator" )
       conversion_function_decl_or_def()

   | LOOKAHEAD(dtor_ctor_decl_spec() dtor_declarator() "{")
       dtor_definition()

   | LOOKAHEAD(("inline"| "virtual")* "~")
       dtor_ctor_decl_spec() simple_dtor_declarator()  ";"

   | LOOKAHEAD(dtor_ctor_decl_spec() ctor_declarator_lookahead())
       ctor_definition()

   | LOOKAHEAD(dtor_ctor_decl_spec() ctor_declarator_lookahead() ";")
      (dtor_ctor_decl_spec() ctor_declarator() ";")

   | LOOKAHEAD((declaration_specifiers())? function_declarator_lookahead())
       function_definition()

   | LOOKAHEAD(declaration_specifiers())
       isTypedef = declaration_specifiers()
           (member_declarator_list(isTypedef))? ";"

   | LOOKAHEAD(t = <ID>) { jjtThis._token = t.image; }
       function_declarator(false) ";"

   | LOOKAHEAD(3)
       qualified_id() ";"

   | access_specifier()  ":"

   | ";"
}

void member_declarator_list(boolean isTypedef)  : {}
{
   member_declarator(isTypedef) ("=" <OCTALINT>)?
   ("," member_declarator(isTypedef) ("=" <OCTALINT>)?)*
}

void member_declarator(boolean isTypedef)  :
{ String name; }
{
   name = declarator()
   {
      if (isTypedef)
         sym.PutTypeName(name);
   }
}

void conversion_function_decl_or_def()  :
{
   Scope sc = null;
   String name = null;
}
{
   [ LOOKAHEAD(scope_override_lookahead()) name = scope_override() ]

   "operator" declaration_specifiers() ("*" | "&")?

   "(" (parameter_list())? ")"
   (LOOKAHEAD(2) type_qualifier())? 
   (exception_spec())?
   func_decl_def(null)  // Temporary (fix the null)
}

void enum_specifier()  :
{ Token t; }
{  
   "enum"
   (
        "{" enumerator_list() "}"
      | t = <ID> (LOOKAHEAD(2) "{" enumerator_list() "}")?
           { jjtThis._token = t.image; }
           { sym.PutTypeName(t.image); }
   )
}

void enumerator_list()  : {}
{
   enumerator() ("," enumerator())*
}

void enumerator()  :
{ Token t; }
{
   t = <ID> ("=" constant_expression())?
   { jjtThis._token = t.image; }   
}

void ptr_operator()  : {}
{
     "&" cv_qualifier_seq()
   | "*" cv_qualifier_seq()
   | ptr_to_member() cv_qualifier_seq()
}

void cv_qualifier_seq()  : {}
{
   [
       LOOKAHEAD(2) ( "const" [ LOOKAHEAD(2) "volatile" ]
     | "volatile" [ LOOKAHEAD(2) "const" ] )
   ]
}

String declarator()  :
{ String name; }
{
  (
    LOOKAHEAD(ptr_operator())
      ptr_operator() name = declarator()
   |
    name = direct_declarator(false)
  )

  { return name; }
}

String direct_declarator(boolean isPtr)  :
{
   String name;
   Token t;
}
{
     LOOKAHEAD(2)
     "~" t = <ID> (LOOKAHEAD(2) declarator_suffixes())?
        { return "~" + t.image; }
   | "(" name = declarator() ")" (LOOKAHEAD(2) declarator_suffixes())?
        { return name; }

   | name = qualified_id() 
        { _variable = _typedef ? null : new Variable(name, sym.GetCurScope(), _type, isPtr); } 
        
     (LOOKAHEAD(2) declarator_suffixes())?
        { 
          if(!_typedef) {
          	if(_parameter)
          		sym.PutParameter(_variable);
          	else
          		sym.PutVariable(_variable);          
	          _variable = null;
          }
          return name;
        }
}

void declarator_suffixes() : {}
{
     ( "["
          {_arity_req = true;} 
       (constant_expression())? 
          {_arity_req = false;} 
       "]"
     )+

   | "(" (parameter_list())? ")"
     (LOOKAHEAD(2) type_qualifier())?
     (exception_spec())?

   | ":" constant_expression()
}

/**
 * Used only for lookahead.
 */
void function_declarator_lookahead() : {}
{
   (LOOKAHEAD(2) ptr_operator() )* qualified_id() "("
}

Scope function_declarator(boolean isTypedef)  :
{ Scope sc = null; }
{
  (
     LOOKAHEAD(ptr_operator()) ptr_operator() sc = function_declarator(isTypedef)
   | sc = function_direct_declarator(isTypedef)
  )
  { return sc; }
}

Scope function_direct_declarator(boolean isTypedef)  :
{
  String name; 
  Scope sc = null;
}
{
     name = qualified_id()		

     {        
        if (!isTypedef) {
       	   sc = sym.OpenScope(name, Scope.FUNC); 
           _function.setName(name);
           _function.setScope(sc);
        }
        else
       	   sc = sym.OpenScope(name, Scope.TYPE);         
     }

     "(" {_parameter = true; } (parameter_list())? {_parameter = false; } ")"
     (LOOKAHEAD(2) type_qualifier())?
     (exception_spec())?
     (LOOKAHEAD("=") "=" <OCTALINT>)?     

     {
        if (isTypedef)
           sym.PutTypeName(name);
        else
           sym.PutFunction(name, sc);
        return sc;
     }
} 

void dtor_ctor_decl_spec() : {}
{
   [ "virtual" ["inline"] | "inline"  ["virtual"] ]
}

void dtor_definition() : {}
{
   (template_head())?
   dtor_ctor_decl_spec()
   dtor_declarator()
   compound_statement(null)
}

void ctor_definition() :
{
   Scope sc = null;
   boolean closeReqd = false;
}
{
   dtor_ctor_decl_spec() sc = ctor_declarator()

   {
      if (closeReqd = (sc != null && sc != sym.GetCurScope()))
         sym.OpenScope(sc);   
   }

   (exception_spec())?
   
   (
     ";"
    |
     [ ctor_initializer() ] compound_statement(null)
   )

   { if (closeReqd) sym.CloseScope(); }
}

void ctor_declarator_lookahead() : {}
{
   LOOKAHEAD( { IsCtor() } ) qualified_id() "("
}

Scope ctor_declarator() :
{
  String name;
  Scope sc = null;
  boolean closeReqd = false;          
}
{
   LOOKAHEAD( { IsCtor() } )
      name = qualified_id()
 
     {
        sc = sym.GetScopeOfFullyScopedName(name);
 
        if (closeReqd = (sc != null && sc != sym.GetCurScope()))
           sym.OpenScope(sc);         
     }
                                      
     "(" [ LOOKAHEAD(2) parameter_list() ]  ")"

     [ LOOKAHEAD(2) exception_spec() ]
      
     {
        if (closeReqd)
           sym.CloseScope();          
 
        return sc;                    
     }
}

void ctor_initializer() : {}
{
   ":" superclass_init() ("," superclass_init())*
}

void superclass_init() : {}
{
   qualified_id()  "(" (expression_list())?  ")"
}

void dtor_declarator() : {}
{
   (LOOKAHEAD(scope_override_lookahead()) scope_override())?
    simple_dtor_declarator()
}

void simple_dtor_declarator() : {}
{
   "~"
   LOOKAHEAD( { IsCtor() } ) <ID> "(" (parameter_list())?  ")"
}

void parameter_list() : {}
{
   parameter_declaration_list() [ LOOKAHEAD(2) [ "," ] "..." ] | "..."
}

void parameter_declaration_list() : {}
{
   parameter_declaration() (LOOKAHEAD(2) "," parameter_declaration())*
}

void parameter_declaration() : {}
{
   declaration_specifiers()
   (
      LOOKAHEAD(declarator()) declarator() 
    | abstract_declarator()
   )
   ("=" assignment_expression())?
}

void initializer() : {}
{
    LOOKAHEAD(3)
     "{" initializer() ("," initializer())* "}"
   | assignment_expression()
}

void type_name() : {}
{
   declaration_specifiers() abstract_declarator()
}

void abstract_declarator() : {}
{
   [ LOOKAHEAD(2)
     (
       "(" abstract_declarator()   ")" (abstract_declarator_suffix())+
     | ("[" (constant_expression())? "]")+
     | ptr_operator() abstract_declarator() 
     )
   ]
}

void abstract_declarator_suffix() : {}
{
    "[" ( constant_expression() )?  "]"
   |
    "(" (parameter_list())? ")"
}

void template_head() : {}
{
   "template" "<" template_parameter_list() ">"
}

void template_parameter_list() : {}
{
   template_parameter() ("," template_parameter())*
}

void template_parameter()  :
{ Token t; }
{
    LOOKAHEAD(3)
      "class" t = <ID> 
      { jjtThis._token = t.image; }
      { sym.PutTypeName(t.image); }
   |
    parameter_declaration()
}

void template_id()  :
{ Token t; }
{
   t = <ID> { jjtThis._token = t.image; }
   "<" template_argument_list() ">"
}

void template_argument_list() : {}
{
   template_argument() ("," template_argument())*
}

void template_argument() : {}
{
    LOOKAHEAD(3) type_name() | shift_expression()
}

void statement_list() : {}
{  
   (LOOKAHEAD(statement()) statement())+
}

void statement() : {}
{
    LOOKAHEAD( declaration() )
      declaration()
   | LOOKAHEAD( expression() ";" )
      expression() ";"
   | compound_statement(null)
   | selection_statement()
   | jump_statement()
   | ";"
   | try_block()
   | throw_statement()
   | LOOKAHEAD(2)
      labeled_statement()
   | iteration_statement()
}

void labeled_statement()  :
{ Token t; }
{
     t = <ID> { jjtThis._token = t.image; } ":" statement()
   | "case" constant_expression()  ":" statement()
   | "default"  ":" statement()
}

void compound_statement(Scope sc) : {}
{
   "{"
       { if(sc==null) jjtThis.scope = sym.OpenScope(null, Scope.COMP_STMT); }
   (statement_list())?   
       { if(sc==null) sym.CloseScope(); }
   "}"
}

void selection_statement() : {}
{
     "if" "(" expression() ")" statement() (LOOKAHEAD(2) "else" statement())?
        { jjtThis._token  = "if"; }
        
   | "switch" "(" expression() ")" statement()
        { jjtThis._token = "switch"; }
}

void iteration_statement() : {}
{
     "while" "(" expression() ")" statement()
        { jjtThis._token = "while"; }
        
   | "do" statement() "while" "(" expression() ")" ";"
        { jjtThis._token = "do"; }

   | "for" "(" 
               (LOOKAHEAD(3) declaration() | expression() ";" | ";")
               (expression())? ";" (expression())? 
           ")" 
           statement()

        { jjtThis._token = "for"; }
}

void jump_statement()  : {}
{
     "goto" <ID> ";"
   | "continue" ";"
   | "break" ";"
   | "return" (expression())? ";"
   		{ jjtThis._token = "return"; }
}

void try_block() : {}
{
   "try" compound_statement(null) (handler())*
}

void handler() : {}
{
   "catch" "(" exception_declaration() ")"
   compound_statement(null)
 |
   "finally" compound_statement(null)
}

void exception_declaration() : {}
{
    parameter_declaration_list() | "..."
}

void throw_statement() : {}
{
   "throw" (assignment_expression())? ";"
}

void expression() : {}
{
   assignment_expression() ( LOOKAHEAD(2) "," assignment_expression())*
}

void assignment_expression() : 
{
  boolean _output_save = _output_port;
  boolean _input_save  = _input_port;
}
{ 
      LOOKAHEAD( conditional_expression() "=" ) 
	    {_output_port = true;} conditional_expression() {_output_port = _output_save;} 
      	"=" 
      	{_input_port  = true;} conditional_expression()	{_input_port  = _input_save;} 

    | LOOKAHEAD( conditional_expression() ("*="|"/="|"%="|"+="|"-="|"<<="|">>="|"&="|"^="|"|=") )
    	{_output_port = true; _input_port = true;} conditional_expression() {_output_port = _output_save; _input_port = _input_save;}
    	("*="|"/="|"%="|"+="|"-="|"<<="|">>="|"&="|"^="|"|=") 
    	{_input_port  = true;}                     conditional_expression() {_input_port  = _input_save;}

	| {_input_port = true;} conditional_expression() {_input_port  = _input_save;}
}

void conditional_expression() : {}
{   
   logical_or_expression()
   ("?" conditional_expression()  ":" conditional_expression())?
}

void constant_expression() : {}
{
     conditional_expression()
}

void logical_or_expression() #nary_expression : 
{ int inputs = 1; }
{
    logical_and_expression() 
	(
	  ( "||" { inputs++; } )
	  logical_and_expression()
	)*
    {
    	if(inputs>1) { 
    		jjtThis.addBlock(Block.create("'built-in/Logical Operator'", "Logical Operator ", "'Operator', 'OR', 'Inputs', '" + inputs + "'"));
    		jjtThis._token = "[" + inputs + "] ||";
    	}
    }
}

void logical_and_expression() #nary_expression : 
{ int inputs = 1; }
{
     inclusive_or_expression() 
	 (
	   ( "&&" { inputs++; } )
	   inclusive_or_expression()
	 )*
    {
    	if(inputs>1) { 
    		jjtThis.addBlock(Block.create("'built-in/Logical Operator'", "Logical Operator ", "'Operator', 'AND', 'Inputs', '" + inputs + "'"));
    		jjtThis._token = "[" + inputs + "] &&";
    	}
    }
}

void inclusive_or_expression() #binary_expression : {}
{
     exclusive_or_expression()
     ( 
       ( "|" { jjtThis.addBlock(Block.create("'sl_act_sg_sup/Bit Operators/Bitwise_OR'", "Bitwise Operator ", "")); jjtThis._token = "|"; } )
       exclusive_or_expression()
     )*
}

void exclusive_or_expression()  : {}
{
     and_expression()( "^" and_expression())*
}

void and_expression() #binary_expression : {}
{
     equality_expression()
     (
       LOOKAHEAD(2) 
       ( "&" { jjtThis.addBlock(Block.create("'sl_act_sg_sup/Bit Operators/Bitwise_AND'", "Bitwise Operator ", "")); jjtThis._token = "&"; } )
       equality_expression()
     )*
}

void equality_expression() #binary_expression : {}
{
    relational_expression()
    (
      ( "!=" { jjtThis.addBlock(Block.create("'built-in/Relational Operator'", "Relational Operator ", "'Operator', '!='")); jjtThis._token = "!="; }
      | "==" { jjtThis.addBlock(Block.create("'built-in/Relational Operator'", "Relational Operator ", "'Operator', '=='")); jjtThis._token = "=="; } ) 
      relational_expression()
    )*
}

void relational_expression() #binary_expression : {}
{
   shift_expression()
   ( 
     LOOKAHEAD(2)
     (   "<"  { jjtThis.addBlock(Block.create("'built-in/Relational Operator'", "Relational Operator ", "'Operator', '<'")); jjtThis._token = "<"; }
       | ">"  { jjtThis.addBlock(Block.create("'built-in/Relational Operator'", "Relational Operator ", "'Operator', '>'")); jjtThis._token = ">"; }
       | "<=" { jjtThis.addBlock(Block.create("'built-in/Relational Operator'", "Relational Operator ", "'Operator', '<='")); jjtThis._token = "<="; }
       | ">=" { jjtThis.addBlock(Block.create("'built-in/Relational Operator'", "Relational Operator ", "'Operator', '>='")); jjtThis._token = ">="; }
     )
     shift_expression()
   )*
}

void shift_expression() #binary_expression : {}
{
    additive_expression()
    (
      (   "<<" { jjtThis.addBlock(Block.create("'sl_act_sg_sup/Bit Operators/LeftShift'", "LeftShift ", "")); jjtThis._token = "<<"; }
        | ">>" { jjtThis.addBlock(Block.create("'sl_act_sg_sup/Bit Operators/RightShift'", "RightShift ", "")); jjtThis._token = ">>";}
      )
      additive_expression()
    )*
}

void additive_expression() #nary_expression : 
{ String inputs = "+"; }
{
    multiplicative_expression()
    (
      LOOKAHEAD(2)
      (
          "+" { inputs += "+"; }
        | "-" { inputs += "-"; }
      )
      multiplicative_expression()
    )*
    {
    	if(inputs.length()>1) { 
    		if(inputs.length()>1) jjtThis.addBlock(Block.create("'built-in/Sum'", "Sum ", "'Inputs', '" + inputs + "'"));
    		jjtThis._token = inputs;
    	}
    }
}

void multiplicative_expression() #nary_expression :
{ String inputs = "*"; }
{
    pm_expression()
    (
      LOOKAHEAD(2)
      (
           "*" { inputs += "*"; }
         | "/" { inputs += "/"; }
      )
      pm_expression()
    )*
    {
    	if(inputs.length()>1) { 
    		jjtThis.addBlock(Block.create("'built-in/Product'", "Product ", "'Inputs', '" + inputs + "'")); 
    		jjtThis._token = inputs;
    	}
    }
}

void pm_expression() : {}
{
    cast_expression() (( ".*" | "->*" ) cast_expression())*
}

void cast_expression() : {}
{  
     LOOKAHEAD( "(" type_name() ")" ) "(" type_name() ")" cast_expression()
   | unary_expression()    
}

void unary_expression() : {}
{  
     "++" unary_expression()
     	{ jjtThis._token = "++"; } 

   | "--" unary_expression()
     	{ jjtThis._token = "--"; } 
   
   | "!"  cast_expression() 
     	{ jjtThis._token = "!"; } 

   | LOOKAHEAD(3) unary_operator() cast_expression()
     	{ jjtThis._token = "operator"; } 

   | "sizeof" ( LOOKAHEAD("(") "(" postfix_expression()  ")" | unary_expression() )
     	{ jjtThis._token = "sizeof"; } 

   | postfix_expression()
        	{ jjtThis._token = "postfix"; } 
   
}

void new_expression() : {}
{    
   (LOOKAHEAD("::") ("::"))?
   "new"
   (
     LOOKAHEAD("(" type_name() ")" )
      "(" type_name() ")" 
    |
     (LOOKAHEAD("(" expression_list() ) "(" expression_list() ")")?
     (
       LOOKAHEAD("(" type_name() ")" )
       "(" type_name() ")" 
      |
       LOOKAHEAD(declaration_specifiers())
        new_type_id()
     )
   )
   (LOOKAHEAD(new_initializer()) new_initializer())?
}

void new_type_id()  : {}
{
   declaration_specifiers()  
   ( LOOKAHEAD(new_declarator()) new_declarator() )?
}

void new_declarator()  : {}
{ 
     direct_new_declarator() | ptr_operator() cv_qualifier_seq()  [ LOOKAHEAD(2) new_declarator() ]
}

void direct_new_declarator()  : {}
{
   (LOOKAHEAD(2) "[" expression() "]" )+
}

void new_initializer()  : {}
{
     "(" ( expression_list() )? ")"
}

void delete_expression()  : {}
{
     ( "::" )? "delete" ( "[" "]" )? cast_expression()
}

void unary_operator()  : {}
{
       "&" | "*" | "+" | "-" | "~"
}

void postfix_expression() :
{ 
   String id = null, temp = null;
   boolean local_out = false;
}
{     
   LOOKAHEAD(3)
    (  "this"
     | ( LOOKAHEAD(2) <STRING> )+
     | "(" expression()  ")"
     | LOOKAHEAD( ("::")? "new") new_expression()
     | LOOKAHEAD( ("::")? "delete") delete_expression()

     | id = id_expression()
     	{ jjtThis._token.add(id); }

     | constant()
     	{ jjtThis._type = jjtThis.CONST; }
    )   

    ( LOOKAHEAD(2)
      (  "["  expression() "]"

       | "(" ( expression_list() )? ")" 
       		{ jjtThis._type = jjtThis.FCN_CALL; }

       | "." temp = id_expression()
       		{ jjtThis._token.add(temp); }

       | "->" temp = id_expression()
       		{ jjtThis._token.add(temp); }

       | "++"
       		{ local_out = true; }

       | "--"
       		{ local_out = true; }
      ) 
    )*
    
    {
 
    	if( id != null && jjtThis._type != jjtThis.FCN_CALL && sym.IsVariable(id) ) {
   			local_out = local_out || _output_port;
   			if(_input_port && local_out) {
   				sym.PutPort(id, Scope.IN_OUT);
   				jjtThis._type = jjtThis.IN_OUT_PORT;
   			}
   			else if(_input_port) {
   				sym.PutPort(id, Scope.IN);
   				jjtThis._type = jjtThis.IN_PORT;
   			}
   			else if(local_out) {
   				sym.PutPort(id, Scope.OUT);
   				jjtThis._type = jjtThis.OUT_PORT;
   			}
   			else
   				sym.PutPort(id, Scope.TEMP);
   		}
    }  

  | simple_type_specifier() "(" ( expression_list() )? ")"
}

String id_expression() :
{ Token t; String retString = ""; }
{   
   (LOOKAHEAD(scope_override_lookahead()) scope_override())?
   (   t = <ID> { jjtThis._token = t.image; retString = t.image; }
     | "operator" optor()
     | "~"  t = <ID> 
   )

   { return retString; }
}

void primary_expression() : {}
{  
   (  "this"
    | ( LOOKAHEAD(2) <STRING> )+
    | "(" expression()  ")"
    | LOOKAHEAD( ("::")? "new")
      new_expression()
    | LOOKAHEAD( ("::")? "delete")
      delete_expression()
    | id_expression()
    | constant()
   )
}

void expression_list()  : {}
{
     assignment_expression()( "," assignment_expression())*
}

String constant() :
{ Token t; }
{
   ( <OCTALINT>
   | <OCTALLONG>
   | <DECIMALINT>
   | <DECIMALLONG>
   | <HEXADECIMALINT>
   | <HEXADECIMALLONG>

   | <UNSIGNED_OCTALINT>
   | <UNSIGNED_OCTALLONG>
   | <UNSIGNED_DECIMALINT>
   | <UNSIGNED_DECIMALLONG>
   | <UNSIGNED_HEXADECIMALINT>
   | <UNSIGNED_HEXADECIMALLONG>

   | <CHARACTER>
   | <FLOATONE>
   | <FLOATTWO>
   | "true"
   | "false" )
   
   { 
     t = getToken(0);
     if (_arity_req && _variable != null)
        _variable.addArity(Integer.valueOf(t.image));
  	 jjtThis._token = t.image;
     return t.image; 
   }   
}

void optor()  : {}
{
     "new" [ LOOKAHEAD(2) "[" "]" ]
   | "delete" [ LOOKAHEAD(2) "[" "]" ]
   | "+"
   | "-"
   | "*"
   | "/"
   | "%"
   | "^"
   | "&"
   | "|"
   | "~"
   | "!"
   | "="
   | "<"
   | ">"
   | "+="
   | "-="
   | "*="
   | "/="
   | "%="
   | "^="
   | "&="
   | "|="
   | "<<"
   | ">>" 
   | ">>="
   | "<<="
   | "=="
   | "!="
   | "<="
   | ">="
   | "&&"
   | "||"
   | "++"
   | "--"
   | ","
   | "->*"
   | "->"
   | "(" ")"
   | "[" "]"
   | declaration_specifiers() (LOOKAHEAD(2) ("*"|"&"))?
}

void exception_spec()  : {}
{
   "throw" "(" exception_list() ")"
}

void exception_list()  : {}
{
   type_name() ( "," type_name())*
}

TOKEN :
{
  <  ID : ["a"-"z","A"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
}


/*end*/
